{"version":3,"sources":["login.js","register.js","home.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","loginSubmit","e","preventDefault","state","login_password","login_username","localStorage","getItem","userList","JSON","parse","found","i","length","username","password","history","push","alert","loginInfoChange","param","setState","target","value","id","action","className","type","autoFocus","placeholder","this","onChange","onClick","Component","Register","firstname","lastname","email","createUser","inputChange","class","Home","style","margin","scope","map","App","obj","arrayList","setItem","stringify","path","exact","component","withRouter","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4a8853d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login_username: '',\r\n            login_password: ''\r\n        }\r\n    }\r\n\r\n    loginSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.login_password && this.state.login_username) {\r\n            \r\n           \r\n            if(localStorage.getItem('userList')){\r\n              let  userList=JSON.parse(localStorage.getItem('userList'));\r\n              let found=false;\r\n                for(let i=0;i<userList.length;i++){\r\n                    \r\n                    if(userList[i].username==this.state.login_username && userList[i].password==this.state.login_password){\r\n                        this.props.history.push('/home');\r\n                        found=true;\r\n                        break;\r\n                    }\r\n                }\r\n                if(found==false){\r\n                    alert('User doesnot exist,please Register')\r\n                }\r\n            }else {\r\n                alert('User doesnot exist,please Register')\r\n            }\r\n\r\n        } else {\r\n            alert('Please fill all the details')\r\n        }\r\n    }\r\n    loginInfoChange = (param, e) => {\r\n        this.setState({ [param]: e.target.value })\r\n       \r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"login\">\r\n                \r\n                <div id=\"section\">\r\n                    <form action=\"\">\r\n                        <div className=\"head\">\r\n                            <h2>LOGIN</h2>\r\n                        </div>\r\n                        <div className=\"textbox\">\r\n                            <i className=\"fas fa-user\" />\r\n                            <input type=\"text\" autoFocus placeholder=\"Enter Username \" value={this.state.login_username} onChange={(e) => this.loginInfoChange('login_username', e)} />\r\n                        </div>\r\n                        <div className=\"textbox\">\r\n                            <i className=\"fas fa-unlock\" />\r\n                            <input type=\"password\" autoFocus placeholder=\"Enter password \" value={this.state.login_password} onChange={(e) => this.loginInfoChange('login_password', e)} />\r\n                        </div>\r\n                        <div className=\"log_btn\">\r\n                            <button type=\"button\" onClick={this.loginSubmit}>Login</button>\r\n                        </div>\r\n                        <div className=\"reg_btn\">\r\n                            <button type=\"button\" onClick={()=>this.props.history.push(\"/register\")}>Register</button>\r\n                        </div>\r\n\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Login;","import React, { Component } from 'react';\r\n\r\nclass Register extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        firstname:'',\r\n        lastname:'',\r\n        email:'',\r\n        username:'',\r\n        password:''\r\n    }\r\n}\r\nloginSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.firstname && this.state.lastname && this.state.email && this.state.username && this.state.password) {\r\n       this.props.createUser(this.state);\r\n       this.setState({ firstname:'',\r\n       lastname:'',\r\n       email:'',\r\n       username:'',\r\n       password:''})\r\n\r\n    } else {\r\n        alert('Please fill all the details')\r\n    }\r\n}\r\ninputChange = (param, e) => {\r\n    this.setState({ [param]: e.target.value })\r\n   \r\n}\r\nrender(){\r\n    return(\r\n        <div id=\"register\">\r\n        <div id=\"section\">\r\n        <form action=\"#\">\r\n       \r\n            <div className=\"head\">\r\n                <h2>Sign up</h2>\r\n            </div>\r\n            <div class=\"textbox\">\r\n                <i className=\"fas fa-file-signature\"/>\r\n                <input type=\"text\" placeholder=\"First name\" value={this.state.firstname} onChange={(e)=>this.inputChange('firstname',e)}/>\r\n            </div>\r\n            <div className=\"textbox\">\r\n                <i className=\"fas fa-file-signature\"/>\r\n                <input type=\"text\" placeholder=\"Last name\" value={this.state.lastname} onChange={(e)=>this.inputChange('lastname',e)}/>\r\n            </div>\r\n            <div className=\"textbox\">\r\n                <i className=\"fas fa-envelope\"/>\r\n                <input type=\"email\" placeholder=\"Enter email\" value={this.state.email} onChange={(e)=>this.inputChange('email',e)}/>\r\n            </div>\r\n            <div className=\"textbox\">\r\n                <i className=\"fas fa-user\"/>\r\n                <input type=\"text\" placeholder=\"Create username\" value={this.state.username} onChange={(e)=>this.inputChange('username',e)}/>\r\n            </div>\r\n            <div className=\"textbox\">\r\n                <i className=\"fas fa-unlock\"/>\r\n                <input type=\"password\" placeholder=\"Create password\" value={this.state.password} onChange={(e)=>this.inputChange('password',e)}/>\r\n            </div>\r\n            <div className=\"log_btn\">\r\n                <button onClick={this.loginSubmit}>Submit</button>\r\n            </div>\r\n           \r\n        </form>\r\n    </div>\r\n    </div>\r\n    )}\r\n}\r\nexport default Register;","import React from 'react';\r\n\r\nconst Home=(props)=>{\r\n    let userList=[]\r\n    if(localStorage.getItem('userList')){\r\n        userList=JSON.parse(localStorage.getItem('userList'))\r\n    }\r\n    return(\r\n        <div id=\"home\" >\r\n            <button style={{margin:'20px'}} className=\"btn btn-primary\" onClick={()=>props.history.push('/')}>SignOut</button>\r\n            <table className=\"table\">\r\n            <thead>\r\n    <tr>\r\n      <th scope=\"col\">Username</th>\r\n      <th scope=\"col\">Password</th>\r\n     \r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n      {userList && userList.map((i)=>{\r\n          return(\r\n              <tr>\r\n                  <td>\r\n                      {i.username} \r\n                  </td>\r\n                  <td>\r\n                      {i.password}\r\n                  </td>\r\n              </tr>\r\n          )\r\n      })}</tbody>\r\n      </table>\r\n    </div>\r\n    )\r\n}\r\nexport default Home;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter \n} from \"react-router-dom\";\nimport Login from './login';\nimport Register from './register';\nimport Home from './home';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n  createUser = (obj) => {\n    var arrayList=[];\n    if(localStorage.getItem('userList')){\n      arrayList= JSON.parse(localStorage.getItem('userList'));\n    }\n    arrayList.push(obj);\n    localStorage.setItem('userList',JSON.stringify(arrayList));\n    this.props.history.push('/')\n  }\n\n  render() {\n    return (<div id=\"conatiner\">\n      \n\n        <Switch>\n          <Route  path=\"/\" exact component={withRouter (Login)}/>\n          <Route  path=\"/register\" exact\n           render={(props) => <Register {...props} createUser={this.createUser} />} />}/>\n          <Route exact path=\"/home\" component={Home} />\n\n        </Switch>\n\n\n    </div>)\n  }\n}\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter \n} from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n   <Router> <App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}